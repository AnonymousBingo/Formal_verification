
Process 0 (that is, the initial process):
{1}let pkU_actual: pkey = pkey_func(skU_actual) in
{2}let pkSi_actual: pkey = pkey_func(skSi_actual) in
{3}let pkSj_actual: pkey = pkey_func(skSj_actual) in
{4}new state_u: bitstring;
{5}new state_si: bitstring;
{6}new state_sj: bitstring;
(
    {7}!
    {8}let skU: skey = skU_actual in
    {9}let state_u_1: bitstring = state_u in
    {10}let idU: bitstring = U_id_const in
    {11}let idSi_u: bitstring = Si_id_const in
    {12}let idSj_target: bitstring = Sj_id_const in
    {13}let pkU: pkey = pkey_func(skU) in
    {14}let Hash_state_u: bitstring = H(state_u_1) in
    {15}event U_starts_Si_process(idU,idSi_u);
    {16}out(U_Si, U_id_const);
    {17}in(U_Si, enc_challenge: bitstring);
    {18}let C: bitstring = decrypt(enc_challenge,skU) in
    {19}let ARGc: bitstring = mod(pow(C,state_u_1),M) in
    {20}let Hash_ARGc: bitstring = H(ARGc) in
    {21}let sign_ARGc: bitstring = sign(Hash_ARGc,skU) in
    {22}out(U_Si, (sign_ARGc,Hash_state_u));
    {23}event U_starts_Sj_process(idU,idSi_u,idSj_target);
    {24}out(U_Sj, (idU,idSi_u,idSj_target,Hash_state_u))
) | (
    {25}!
    {26}let skSi: skey = skSi_actual in
    {27}let state_si_1: bitstring = state_si in
    {28}let idU_si: bitstring = U_id_const in
    {29}let idSi: bitstring = Si_id_const in
    {30}let pkSi: pkey = pkey_func(skSi) in
    {31}in(U_Si, U_id_rcvd: bitstring);
    {32}new C_challenge: bitstring;
    {33}out(U_Si, encrypt(C_challenge,pkU_actual));
    {34}in(U_Si, (sign_ARGc_rcvd: bitstring,Hash_state_u_rcvd: bitstring));
    {35}out(Si_As, (idU_si,idSi,Hash_state_u_rcvd));
    {36}in(Si_As, enc_state_u: bitstring);
    {37}let state_u_As: bitstring = decrypt(enc_state_u,skSi) in
    {38}let Hash_state_u_As: bitstring = H(state_u_As) in
    {39}if (Hash_state_u_rcvd = Hash_state_u_As) then
    {40}let ARGc_Si: bitstring = mod(pow(C_challenge,state_u_As),M) in
    {41}let Hash_Si_ARGc: bitstring = H(ARGc_Si) in
    {42}let ARGc_rcvd: bitstring = checksign(sign_ARGc_rcvd,pkU_actual) in
    {43}if (ARGc_rcvd = Hash_Si_ARGc) then
    {44}event U_authenticated_by_Si(idU_si,idSi);
    {45}in(Si_Sj, (idU_Sj: bitstring,Hash_state_u_Sj: bitstring,idSi_Sj: bitstring));
    {46}if (Hash_state_u_Sj = Hash_state_u_As) then
    {47}let ARG2c: bitstring = mod(pow(ARGc_Si,state_si_1),M) in
    {48}let Hash_ARG2c: bitstring = H(ARG2c) in
    {49}let Sign1_ARG2c: bitstring = sign(Hash_ARG2c,skSi) in
    {50}let Sign2_ARGc_Si: bitstring = sign(sign_ARGc_rcvd,skSi) in
    {51}let C_enc: bitstring = encrypt(C_challenge,pkSj_actual) in
    {52}out(Si_Sj, (C_enc,Sign2_ARGc_Si,Sign1_ARG2c,idSi,pkSi))
) | (
    {53}!
    {54}let skSj: skey = skSj_actual in
    {55}let idSj: bitstring = Sj_id_const in
    {56}let pkSj: pkey = pkey_func(skSj) in
    {57}in(U_Sj, (idU_rcvd: bitstring,idSi_rcvd_u: bitstring,Hash_stateu_rcvd: bitstring));
    {58}out(Si_Sj, (idU_rcvd,Hash_stateu_rcvd,idSi_rcvd_u));
    {59}in(Si_Sj, (C_enc_rcvd: bitstring,Sign2_ARGc_Si_rcvd: bitstring,Sign1_ARG2c_rcvd: bitstring,idSi_rcvd: bitstring,pkSi_rcvd: bitstring));
    {60}out(Sj_As, (idU_rcvd,idSi_rcvd,idSj));
    {61}in(Sj_As, (enc_state_u_1: bitstring,enc_state_si: bitstring));
    {62}let state_u_2: bitstring = decrypt(enc_state_u_1,skSj) in
    {63}let state_si_2: bitstring = decrypt(enc_state_si,skSj) in
    {64}if (H(state_u_2) = Hash_stateu_rcvd) then
    {65}let Sign1_ARGc_content_Si: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
    {66}let Sign1_ARGc_content: bitstring = checksign(Sign1_ARGc_content_Si,pkU_actual) in
    {67}let Sign2_ARG2c_content: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
    {68}let C_challenge_1: bitstring = decrypt(C_enc_rcvd,skSj) in
    {69}let Hash_c: bitstring = H(C_challenge_1) in
    {70}let re_ARGc: bitstring = mod(pow(C_challenge_1,state_u_2),M) in
    {71}let Hash_re_ARGc: bitstring = H(re_ARGc) in
    {72}let re_ARG2c: bitstring = mod(pow(re_ARGc,state_si_2),M) in
    {73}let Hash_re_ARG2c: bitstring = H(re_ARG2c) in
    {74}if (Hash_re_ARG2c = Sign2_ARG2c_content) then
    {75}if (Hash_c = Sign1_ARGc_content) then
    {76}event U_authenticated_by_Sj(idU_rcvd,idSi_rcvd,idSj)
) | (
    {77}!
    {78}let state_u_3: bitstring = state_u in
    {79}let state_si_3: bitstring = state_si in
    {80}let state_sj_1: bitstring = state_sj in
    {81}in(Si_As, (idU_rcvd_1: bitstring,idSi_rcvd_1: bitstring,Hash_state_u_rcvd_1: bitstring));
    {82}if (Hash_state_u_rcvd_1 = H(state_u_3)) then
    {83}out(Si_As, encrypt(state_u_3,pkSi_actual));
    {84}in(Sj_As, (idU_rcvd_sj: bitstring,idSi_rcvd_sj: bitstring,idSj_rcvd: bitstring));
    {85}out(Sj_As, (encrypt(state_u_3,pkSj_actual),encrypt(state_si_3,pkSj_actual)))
)

--  Process 1 (that is, process 0, with let moved downwards):
{4}new state_u: bitstring;
{5}new state_si: bitstring;
{6}new state_sj: bitstring;
(
    {7}!
    {11}let idSi_u: bitstring = Si_id_const in
    {10}let idU: bitstring = U_id_const in
    {15}event U_starts_Si_process(idU,idSi_u);
    {16}out(U_Si, U_id_const);
    {17}in(U_Si, enc_challenge: bitstring);
    {8}let skU: skey = skU_actual in
    {18}let C: bitstring = decrypt(enc_challenge,skU) in
    {9}let state_u_1: bitstring = state_u in
    {19}let ARGc: bitstring = mod(pow(C,state_u_1),M) in
    {20}let Hash_ARGc: bitstring = H(ARGc) in
    {21}let sign_ARGc: bitstring = sign(Hash_ARGc,skU) in
    {14}let Hash_state_u: bitstring = H(state_u_1) in
    {22}out(U_Si, (sign_ARGc,Hash_state_u));
    {12}let idSj_target: bitstring = Sj_id_const in
    {23}event U_starts_Sj_process(idU,idSi_u,idSj_target);
    {24}out(U_Sj, (idU,idSi_u,idSj_target,Hash_state_u))
) | (
    {3}let pkSj_actual: pkey = pkey_func(skSj_actual) in
    {1}let pkU_actual: pkey = pkey_func(skU_actual) in
    (
        {25}!
        {31}in(U_Si, U_id_rcvd: bitstring);
        {32}new C_challenge: bitstring;
        {33}out(U_Si, encrypt(C_challenge,pkU_actual));
        {34}in(U_Si, (sign_ARGc_rcvd: bitstring,Hash_state_u_rcvd: bitstring));
        {29}let idSi: bitstring = Si_id_const in
        {28}let idU_si: bitstring = U_id_const in
        {35}out(Si_As, (idU_si,idSi,Hash_state_u_rcvd));
        {36}in(Si_As, enc_state_u: bitstring);
        {26}let skSi: skey = skSi_actual in
        {37}let state_u_As: bitstring = decrypt(enc_state_u,skSi) in
        {38}let Hash_state_u_As: bitstring = H(state_u_As) in
        {39}if (Hash_state_u_rcvd = Hash_state_u_As) then
        {42}let ARGc_rcvd: bitstring = checksign(sign_ARGc_rcvd,pkU_actual) in
        {40}let ARGc_Si: bitstring = mod(pow(C_challenge,state_u_As),M) in
        {41}let Hash_Si_ARGc: bitstring = H(ARGc_Si) in
        {43}if (ARGc_rcvd = Hash_Si_ARGc) then
        {44}event U_authenticated_by_Si(idU_si,idSi);
        {45}in(Si_Sj, (idU_Sj: bitstring,Hash_state_u_Sj: bitstring,idSi_Sj: bitstring));
        {46}if (Hash_state_u_Sj = Hash_state_u_As) then
        {51}let C_enc: bitstring = encrypt(C_challenge,pkSj_actual) in
        {50}let Sign2_ARGc_Si: bitstring = sign(sign_ARGc_rcvd,skSi) in
        {27}let state_si_1: bitstring = state_si in
        {47}let ARG2c: bitstring = mod(pow(ARGc_Si,state_si_1),M) in
        {48}let Hash_ARG2c: bitstring = H(ARG2c) in
        {49}let Sign1_ARG2c: bitstring = sign(Hash_ARG2c,skSi) in
        {30}let pkSi: pkey = pkey_func(skSi) in
        {52}out(Si_Sj, (C_enc,Sign2_ARGc_Si,Sign1_ARG2c,idSi,pkSi))
    ) | (
        {2}let pkSi_actual: pkey = pkey_func(skSi_actual) in
        (
            {53}!
            {57}in(U_Sj, (idU_rcvd: bitstring,idSi_rcvd_u: bitstring,Hash_stateu_rcvd: bitstring));
            {58}out(Si_Sj, (idU_rcvd,Hash_stateu_rcvd,idSi_rcvd_u));
            {59}in(Si_Sj, (C_enc_rcvd: bitstring,Sign2_ARGc_Si_rcvd: bitstring,Sign1_ARG2c_rcvd: bitstring,idSi_rcvd: bitstring,pkSi_rcvd: bitstring));
            {55}let idSj: bitstring = Sj_id_const in
            {60}out(Sj_As, (idU_rcvd,idSi_rcvd,idSj));
            {61}in(Sj_As, (enc_state_u_1: bitstring,enc_state_si: bitstring));
            {54}let skSj: skey = skSj_actual in
            {62}let state_u_2: bitstring = decrypt(enc_state_u_1,skSj) in
            {63}let state_si_2: bitstring = decrypt(enc_state_si,skSj) in
            {64}if (H(state_u_2) = Hash_stateu_rcvd) then
            {65}let Sign1_ARGc_content_Si: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
            {66}let Sign1_ARGc_content: bitstring = checksign(Sign1_ARGc_content_Si,pkU_actual) in
            {67}let Sign2_ARG2c_content: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
            {68}let C_challenge_1: bitstring = decrypt(C_enc_rcvd,skSj) in
            {70}let re_ARGc: bitstring = mod(pow(C_challenge_1,state_u_2),M) in
            {72}let re_ARG2c: bitstring = mod(pow(re_ARGc,state_si_2),M) in
            {73}let Hash_re_ARG2c: bitstring = H(re_ARG2c) in
            {74}if (Hash_re_ARG2c = Sign2_ARG2c_content) then
            {69}let Hash_c: bitstring = H(C_challenge_1) in
            {75}if (Hash_c = Sign1_ARGc_content) then
            {76}event U_authenticated_by_Sj(idU_rcvd,idSi_rcvd,idSj)
        ) | (
            {77}!
            {81}in(Si_As, (idU_rcvd_1: bitstring,idSi_rcvd_1: bitstring,Hash_state_u_rcvd_1: bitstring));
            {78}let state_u_3: bitstring = state_u in
            {82}if (Hash_state_u_rcvd_1 = H(state_u_3)) then
            {83}out(Si_As, encrypt(state_u_3,pkSi_actual));
            {84}in(Sj_As, (idU_rcvd_sj: bitstring,idSi_rcvd_sj: bitstring,idSj_rcvd: bitstring));
            {79}let state_si_3: bitstring = state_si in
            {85}out(Sj_As, (encrypt(state_u_3,pkSj_actual),encrypt(state_si_3,pkSj_actual)))
        )
    )
)

-- Query not attacker(state_u[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_u[])
RESULT not attacker(state_u[]) is true.
-- Query not attacker(state_si[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_si[])
RESULT not attacker(state_si[]) is true.
-- Query not attacker(state_sj[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_sj[])
RESULT not attacker(state_sj[]) is true.
-- Query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1])
RESULT not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) is true.
-- Query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si))
goal reachable: b-event(U_starts_Si_process(U_id_const,Si_id_const)) -> event(U_authenticated_by_Si(U_id_const,Si_id_const))
RESULT event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) is true.
-- Query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj))
RESULT event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) is true.
-- Query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj))
goal reachable: b-event(@p_act(@occ17_1,encrypt(C_challenge_2,pkey_func(skU_actual)))) && b-inj-event(U_starts_Si_process(U_id_const,Si_id_const),@occ15_1) && attacker(U_id_rcvd_1) -> inj-event(U_authenticated_by_Si(U_id_const,Si_id_const),@occ44_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd hypothesis occurs before the conclusion.
Abbreviations:
C_challenge_2 = C_challenge[U_id_rcvd = U_id_rcvd_1,!1 = @sid]
@occ44_1 = @occ44[enc_state_u = encrypt(state_u[],pkey_func(skSi_actual)),Hash_state_u_rcvd = H(state_u[]),sign_ARGc_rcvd = sign(H(mod(pow(C_challenge_2,state_u[]),M[])),skU_actual),U_id_rcvd = U_id_rcvd_1,!1 = @sid]
@occ17_1 = @occ17[!1 = @sid_1]
@occ15_1 = @occ15[!1 = @sid_1]
RESULT inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) is true.
-- Query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj))
RESULT inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(state_u[]) is true.

Query not attacker(state_si[]) is true.

Query not attacker(state_sj[]) is true.

Query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) is true.

Query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) is true.

Query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) is true.

Query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) is true.

Query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) is true.

--------------------------------------------------------------


D:\Projects\1Multiserver_Authentication\Tests_For_protocol_09_May\Proverif on Protocol>..\..\proverifbin2.05.tar\proverif2.05\proverif.exe -o Authentication_output.txt Authentication.pv
Process 0 (that is, the initial process):
{1}let pkU_actual: pkey = pkey_func(skU_actual) in
{2}let pkSi_actual: pkey = pkey_func(skSi_actual) in
{3}let pkSj_actual: pkey = pkey_func(skSj_actual) in
{4}new state_u: bitstring;
{5}new state_si: bitstring;
{6}new state_sj: bitstring;
(
    {7}!
    {8}let skU: skey = skU_actual in
    {9}let state_u_1: bitstring = state_u in
    {10}let idU: bitstring = U_id_const in
    {11}let idSi_u: bitstring = Si_id_const in
    {12}let idSj_target: bitstring = Sj_id_const in
    {13}let pkU: pkey = pkey_func(skU) in
    {14}let Hash_state_u: bitstring = H(state_u_1) in
    {15}event U_starts_Si_process(idU,idSi_u);
    {16}out(U_Si, U_id_const);
    {17}in(U_Si, enc_challenge: bitstring);
    {18}let C: bitstring = decrypt(enc_challenge,skU) in
    {19}let ARGc: bitstring = mod(pow(C,state_u_1),M) in
    {20}let Hash_ARGc: bitstring = H(ARGc) in
    {21}let sign_ARGc: bitstring = sign(Hash_ARGc,skU) in
    {22}out(U_Si, (sign_ARGc,Hash_state_u));
    {23}event U_starts_Sj_process(idU,idSi_u,idSj_target);
    {24}out(U_Sj, (idU,idSi_u,idSj_target,Hash_state_u))
) | (
    {25}!
    {26}let skSi: skey = skSi_actual in
    {27}let state_si_1: bitstring = state_si in
    {28}let idU_si: bitstring = U_id_const in
    {29}let idSi: bitstring = Si_id_const in
    {30}let pkSi: pkey = pkey_func(skSi) in
    {31}in(U_Si, U_id_rcvd: bitstring);
    {32}new C_challenge: bitstring;
    {33}out(U_Si, encrypt(C_challenge,pkU_actual));
    {34}in(U_Si, (sign_ARGc_rcvd: bitstring,Hash_state_u_rcvd: bitstring));
    {35}out(Si_As, (idU_si,idSi,Hash_state_u_rcvd));
    {36}in(Si_As, enc_state_u: bitstring);
    {37}let state_u_As: bitstring = decrypt(enc_state_u,skSi) in
    {38}let Hash_state_u_As: bitstring = H(state_u_As) in
    {39}if (Hash_state_u_rcvd = Hash_state_u_As) then
    {40}let ARGc_Si: bitstring = mod(pow(C_challenge,state_u_As),M) in
    {41}let Hash_Si_ARGc: bitstring = H(ARGc_Si) in
    {42}let ARGc_rcvd: bitstring = checksign(sign_ARGc_rcvd,pkU_actual) in
    {43}if (ARGc_rcvd = Hash_Si_ARGc) then
    {44}event U_authenticated_by_Si(idU_si,idSi);
    {45}in(Si_Sj, (idU_Sj: bitstring,Hash_state_u_Sj: bitstring,idSi_Sj: bitstring));
    {46}if (Hash_state_u_Sj = Hash_state_u_As) then
    {47}let ARG2c: bitstring = mod(pow(ARGc_Si,state_si_1),M) in
    {48}let Hash_ARG2c: bitstring = H(ARG2c) in
    {49}let Sign1_ARG2c: bitstring = sign(Hash_ARG2c,skSi) in
    {50}let Sign2_ARGc_Si: bitstring = sign(sign_ARGc_rcvd,skSi) in
    {51}let C_enc: bitstring = encrypt(C_challenge,pkSj_actual) in
    {52}out(Si_Sj, (C_enc,Sign2_ARGc_Si,Sign1_ARG2c,idSi,pkSi))
) | (
    {53}!
    {54}let skSj: skey = skSj_actual in
    {55}let idSj: bitstring = Sj_id_const in
    {56}let pkSj: pkey = pkey_func(skSj) in
    {57}in(U_Sj, (idU_rcvd: bitstring,idSi_rcvd_u: bitstring,Hash_stateu_rcvd: bitstring));
    {58}out(Si_Sj, (idU_rcvd,Hash_stateu_rcvd,idSi_rcvd_u));
    {59}in(Si_Sj, (C_enc_rcvd: bitstring,Sign2_ARGc_Si_rcvd: bitstring,Sign1_ARG2c_rcvd: bitstring,idSi_rcvd: bitstring,pkSi_rcvd: bitstring));
    {60}out(Sj_As, (idU_rcvd,idSi_rcvd,idSj));
    {61}in(Sj_As, (enc_state_u_1: bitstring,enc_state_si: bitstring));
    {62}let state_u_2: bitstring = decrypt(enc_state_u_1,skSj) in
    {63}let state_si_2: bitstring = decrypt(enc_state_si,skSj) in
    {64}if (H(state_u_2) = Hash_stateu_rcvd) then
    {65}let Sign1_ARGc_content_Si: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
    {66}let Sign1_ARGc_content: bitstring = checksign(Sign1_ARGc_content_Si,pkU_actual) in
    {67}let Sign2_ARG2c_content: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
    {68}let C_challenge_1: bitstring = decrypt(C_enc_rcvd,skSj) in
    {69}let Hash_c: bitstring = H(C_challenge_1) in
    {70}let re_ARGc: bitstring = mod(pow(C_challenge_1,state_u_2),M) in
    {71}let Hash_re_ARGc: bitstring = H(re_ARGc) in
    {72}let re_ARG2c: bitstring = mod(pow(re_ARGc,state_si_2),M) in
    {73}let Hash_re_ARG2c: bitstring = H(re_ARG2c) in
    {74}if (Hash_re_ARG2c = Sign2_ARG2c_content) then
    {75}if (Hash_c = Sign1_ARGc_content) then
    {76}event U_authenticated_by_Sj(idU_rcvd,idSi_rcvd,idSj)
) | (
    {77}!
    {78}let state_u_3: bitstring = state_u in
    {79}let state_si_3: bitstring = state_si in
    {80}let state_sj_1: bitstring = state_sj in
    {81}in(Si_As, (idU_rcvd_1: bitstring,idSi_rcvd_1: bitstring,Hash_state_u_rcvd_1: bitstring));
    {82}if (Hash_state_u_rcvd_1 = H(state_u_3)) then
    {83}out(Si_As, encrypt(state_u_3,pkSi_actual));
    {84}in(Sj_As, (idU_rcvd_sj: bitstring,idSi_rcvd_sj: bitstring,idSj_rcvd: bitstring));
    {85}out(Sj_As, (encrypt(state_u_3,pkSj_actual),encrypt(state_si_3,pkSj_actual)))
)

--  Process 1 (that is, process 0, with let moved downwards):
{4}new state_u: bitstring;
{5}new state_si: bitstring;
{6}new state_sj: bitstring;
(
    {7}!
    {11}let idSi_u: bitstring = Si_id_const in
    {10}let idU: bitstring = U_id_const in
    {15}event U_starts_Si_process(idU,idSi_u);
    {16}out(U_Si, U_id_const);
    {17}in(U_Si, enc_challenge: bitstring);
    {8}let skU: skey = skU_actual in
    {18}let C: bitstring = decrypt(enc_challenge,skU) in
    {9}let state_u_1: bitstring = state_u in
    {19}let ARGc: bitstring = mod(pow(C,state_u_1),M) in
    {20}let Hash_ARGc: bitstring = H(ARGc) in
    {21}let sign_ARGc: bitstring = sign(Hash_ARGc,skU) in
    {14}let Hash_state_u: bitstring = H(state_u_1) in
    {22}out(U_Si, (sign_ARGc,Hash_state_u));
    {12}let idSj_target: bitstring = Sj_id_const in
    {23}event U_starts_Sj_process(idU,idSi_u,idSj_target);
    {24}out(U_Sj, (idU,idSi_u,idSj_target,Hash_state_u))
) | (
    {3}let pkSj_actual: pkey = pkey_func(skSj_actual) in
    {1}let pkU_actual: pkey = pkey_func(skU_actual) in
    (
        {25}!
        {31}in(U_Si, U_id_rcvd: bitstring);
        {32}new C_challenge: bitstring;
        {33}out(U_Si, encrypt(C_challenge,pkU_actual));
        {34}in(U_Si, (sign_ARGc_rcvd: bitstring,Hash_state_u_rcvd: bitstring));
        {29}let idSi: bitstring = Si_id_const in
        {28}let idU_si: bitstring = U_id_const in
        {35}out(Si_As, (idU_si,idSi,Hash_state_u_rcvd));
        {36}in(Si_As, enc_state_u: bitstring);
        {26}let skSi: skey = skSi_actual in
        {37}let state_u_As: bitstring = decrypt(enc_state_u,skSi) in
        {38}let Hash_state_u_As: bitstring = H(state_u_As) in
        {39}if (Hash_state_u_rcvd = Hash_state_u_As) then
        {42}let ARGc_rcvd: bitstring = checksign(sign_ARGc_rcvd,pkU_actual) in
        {40}let ARGc_Si: bitstring = mod(pow(C_challenge,state_u_As),M) in
        {41}let Hash_Si_ARGc: bitstring = H(ARGc_Si) in
        {43}if (ARGc_rcvd = Hash_Si_ARGc) then
        {44}event U_authenticated_by_Si(idU_si,idSi);
        {45}in(Si_Sj, (idU_Sj: bitstring,Hash_state_u_Sj: bitstring,idSi_Sj: bitstring));
        {46}if (Hash_state_u_Sj = Hash_state_u_As) then
        {51}let C_enc: bitstring = encrypt(C_challenge,pkSj_actual) in
        {50}let Sign2_ARGc_Si: bitstring = sign(sign_ARGc_rcvd,skSi) in
        {27}let state_si_1: bitstring = state_si in
        {47}let ARG2c: bitstring = mod(pow(ARGc_Si,state_si_1),M) in
        {48}let Hash_ARG2c: bitstring = H(ARG2c) in
        {49}let Sign1_ARG2c: bitstring = sign(Hash_ARG2c,skSi) in
        {30}let pkSi: pkey = pkey_func(skSi) in
        {52}out(Si_Sj, (C_enc,Sign2_ARGc_Si,Sign1_ARG2c,idSi,pkSi))
    ) | (
        {2}let pkSi_actual: pkey = pkey_func(skSi_actual) in
        (
            {53}!
            {57}in(U_Sj, (idU_rcvd: bitstring,idSi_rcvd_u: bitstring,Hash_stateu_rcvd: bitstring));
            {58}out(Si_Sj, (idU_rcvd,Hash_stateu_rcvd,idSi_rcvd_u));
            {59}in(Si_Sj, (C_enc_rcvd: bitstring,Sign2_ARGc_Si_rcvd: bitstring,Sign1_ARG2c_rcvd: bitstring,idSi_rcvd: bitstring,pkSi_rcvd: bitstring));
            {55}let idSj: bitstring = Sj_id_const in
            {60}out(Sj_As, (idU_rcvd,idSi_rcvd,idSj));
            {61}in(Sj_As, (enc_state_u_1: bitstring,enc_state_si: bitstring));
            {54}let skSj: skey = skSj_actual in
            {62}let state_u_2: bitstring = decrypt(enc_state_u_1,skSj) in
            {63}let state_si_2: bitstring = decrypt(enc_state_si,skSj) in
            {64}if (H(state_u_2) = Hash_stateu_rcvd) then
            {65}let Sign1_ARGc_content_Si: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
            {66}let Sign1_ARGc_content: bitstring = checksign(Sign1_ARGc_content_Si,pkU_actual) in
            {67}let Sign2_ARG2c_content: bitstring = checksign(Sign2_ARGc_Si_rcvd,pkSi_actual) in
            {68}let C_challenge_1: bitstring = decrypt(C_enc_rcvd,skSj) in
            {70}let re_ARGc: bitstring = mod(pow(C_challenge_1,state_u_2),M) in
            {72}let re_ARG2c: bitstring = mod(pow(re_ARGc,state_si_2),M) in
            {73}let Hash_re_ARG2c: bitstring = H(re_ARG2c) in
            {74}if (Hash_re_ARG2c = Sign2_ARG2c_content) then
            {69}let Hash_c: bitstring = H(C_challenge_1) in
            {75}if (Hash_c = Sign1_ARGc_content) then
            {76}event U_authenticated_by_Sj(idU_rcvd,idSi_rcvd,idSj)
        ) | (
            {77}!
            {81}in(Si_As, (idU_rcvd_1: bitstring,idSi_rcvd_1: bitstring,Hash_state_u_rcvd_1: bitstring));
            {78}let state_u_3: bitstring = state_u in
            {82}if (Hash_state_u_rcvd_1 = H(state_u_3)) then
            {83}out(Si_As, encrypt(state_u_3,pkSi_actual));
            {84}in(Sj_As, (idU_rcvd_sj: bitstring,idSi_rcvd_sj: bitstring,idSj_rcvd: bitstring));
            {79}let state_si_3: bitstring = state_si in
            {85}out(Sj_As, (encrypt(state_u_3,pkSj_actual),encrypt(state_si_3,pkSj_actual)))
        )
    )
)

-- Query not attacker(state_u[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_u[])
RESULT not attacker(state_u[]) is true.
-- Query not attacker(state_si[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_si[])
RESULT not attacker(state_si[]) is true.
-- Query not attacker(state_sj[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(state_sj[])
RESULT not attacker(state_sj[]) is true.
-- Query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1])
RESULT not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) is true.
-- Query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si))
goal reachable: b-event(U_starts_Si_process(U_id_const,Si_id_const)) -> event(U_authenticated_by_Si(U_id_const,Si_id_const))
RESULT event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) is true.
-- Query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj))
RESULT event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) is true.
-- Query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj))
goal reachable: b-event(@p_act(@occ17_1,encrypt(C_challenge_2,pkey_func(skU_actual)))) && b-inj-event(U_starts_Si_process(U_id_const,Si_id_const),@occ15_1) && attacker(U_id_rcvd_1) -> inj-event(U_authenticated_by_Si(U_id_const,Si_id_const),@occ44_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd hypothesis occurs before the conclusion.
Abbreviations:
C_challenge_2 = C_challenge[U_id_rcvd = U_id_rcvd_1,!1 = @sid]
@occ44_1 = @occ44[enc_state_u = encrypt(state_u[],pkey_func(skSi_actual)),Hash_state_u_rcvd = H(state_u[]),sign_ARGc_rcvd = sign(H(mod(pow(C_challenge_2,state_u[]),M[])),skU_actual),U_id_rcvd = U_id_rcvd_1,!1 = @sid]
@occ17_1 = @occ17[!1 = @sid_1]
@occ15_1 = @occ15[!1 = @sid_1]
RESULT inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) is true.
-- Query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj))
RESULT inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(state_u[]) is true.

Query not attacker(state_si[]) is true.

Query not attacker(state_sj[]) is true.

Query not attacker(C_challenge[U_id_rcvd = v,!1 = v_1]) is true.

Query event(U_authenticated_by_Si(idUser_Si,idServer_Si)) ==> event(U_starts_Si_process(idUser_Si,idServer_Si)) is true.

Query event(U_authenticated_by_Sj(idUser_Sj,idServerSi_ctx,idServer_Sj)) ==> event(U_starts_Sj_process(idUser_Sj,idServerSi_ctx,idServer_Sj)) is true.

Query inj-event(U_authenticated_by_Si(idUser_Si_inj,idServer_Si_inj)) ==> inj-event(U_starts_Si_process(idUser_Si_inj,idServer_Si_inj)) is true.

Query inj-event(U_authenticated_by_Sj(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) ==> inj-event(U_starts_Sj_process(idUser_Sj_inj,idServerSi_ctx_inj,idServer_Sj_inj)) is true.

--------------------------------------------------------------
